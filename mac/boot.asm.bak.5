; 显示标号的汇编地址
    jmp start
mytext db 'L', 0x07, 'a', 0x07, 'b', 0x07, 'e', 0x07, 'l', 0x07, ' ', 0x07, 'o', 0x07,\
         'f', 0x07, 'f', 0x07, 's', 0x07, 'e', 0x07,'t', 0x07, ':', 0x07

start:
    mov ax, 0x7c0
    mov ds, ax

    mov ax, 0xb800
    mov es, ax

    cld
    mov si, mytext
    mov di, 0
    mov cx, (start-mytext)/2
    rep movsw

    ; 得到标号所代表的汇编地址
    mov ax, number
    ; 分解各个数位
    mov bx, ax
    mov cx, 5   ;循环次数
    mov si, 10  ; 除数
digit:
    xor dx, dx ; dx会保存相除之后的余数，在循环开始前清零
    div si ; 想出之后，商在ax中， 余数在dx中
    mov [bx], dl ; 保存数位 ，这种写法访问内存时的偏移地址来自于bx寄存器 
    inc bx ;用于将bx的内容加1，以指向下一个相邻的内存地址 
    loop digit  ; 在执行时，会先判断寄存器cx的值，cx非0才会跳转，如果cx的值为0，则终止循环


; loop循环法
; ; 传送给显示器
;     mov cx, 5 ;循环次数
; show:
;     ; 因为上面bx保存完后bx进行了+1，退出上面时，bx指向的是最后一个的后面，多了一个
;     dec bx ; 将bx寄存器的值-1
;     mov al,[bx]
;     add al, 0x30
;     mov ah, 04 ; 黑底红字
;     mov [es:di], ax ; 段超越前缀
;     add di, 2 ;指向下一个字的位置
;     loop show

; 书中的方法
    ; 显示各个数位
    mov bx, number
    mov si, 4 ; 初始索引值，因为最后一个数位的索引是4，因为从右往左显示
show:
    ; 这里的加法运算不是在编译时运行的，而是在指令实际运行时执行的
    ; 这里bx里存放的是基地址，是标号numner后面第一个数位的偏移地址
    mov al, [bx+si] ;依次得到这5个数位，si相当于索引，因此si又叫索引寄存器，或者变址寄存器
    add al,0x30
    mov ah,0x40 ; 黑底红字
    mov [es:di], ax ; 传送到显存
    add di, 2 ; 指向下一个字的位置
    dec si ;si -1 
    jns show ; 跳转指令，意思是如果标志寄存器的符号位不是1，则转移到标号show所在的位置处开始执行

    jmp $
number db 0, 0, 0, 0, 0 ; 存放分解出来的数位
    times 510-($-$$) db 0
    db 0x55, 0xaa